#!/usr/bin/env python3
# -*- codi    "       "üî• –ù–æ–≤–æ–µ –ª–∏—Ü–æ –≤ –Ω–∞—à–µ–π –≥–∞–ª–µ—Ä–µ–µ!\n\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! Versavija –∑–¥–µ—Å—å! üëã\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!\n\n–í–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ! üì∏üíé",   "üöÄ –ù–æ–≤–æ–µ –ª–∏—Ü–æ –≤ –Ω–∞—à–µ–π –≥–∞–ª–µ—Ä–µ–µ!\n\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! Versavija –∑–¥–µ—Å—å! üëã\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!\n\n–í–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ! üì∏üíé","üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤!\n\n–ü—Ä–∏–≤–µ—Ç, {name}! –Ø Versavija - –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏! üì∑\n\n–ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä - —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è!\n\n–†–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! üòç", –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, –Ω–æ–≤—ã–π –¥—Ä—É–≥ {name}!\n\n–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –≤—ã –∫ –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å! ü•≥\n\n–Ø Versavija, –∏ —è —Å–æ–∑–¥–∞—é –≤–æ–ª—à–µ–±–Ω—ã–µ –∫–∞–¥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–≤—Å–µ–≥–¥–∞! üì∑üí´",g: utf-8 -*-

"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
"""

import asyncio
import logging
import random
import sqlite3
import os
from datetime import datetime, timedelta
from typing import Dict, Set
from aiogram.types import Message
from aiogram.filters import Command
from config import dp, bot, ADMIN_IDS

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TARGET_CHANNEL_ID = -1002553563891
CHANNEL_USERNAME = "versavija_test_group"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –¥–ª—è Client API
WELCOME_DELAY = 30  # 30 —Å–µ–∫—É–Ω–¥ –¥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è

# –î–ª—è Pyrogram Client –Ω—É–∂–Ω—ã API credentials
API_ID = "21700254"
API_HASH = "5d82759692cfedc1170598a5d5cd2ad9"
PHONE_NUMBER = "+79170386777"
PASSWORD_2FA = "Miron975864...!!!"
SESSION_NAME = "subscriber_tracker"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Versavija
WELCOME_MESSAGES = [
    "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –¥—Ä—É–∂–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é, {name}!\n\n–ü—Ä–∏–≤–µ—Ç! –Ø Versavija - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ —Å–∞–º—ã–µ —è—Ä–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã! üì∏‚ú®\n\n–†–∞–¥–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å!",
    
    "ÔøΩ –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, –Ω–æ–≤—ã–π –¥—Ä—É–≥!\n\n–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –≤—ã –∫ –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å! ü•≥\n\n–Ø Versavija, –∏ —è —Å–æ–∑–¥–∞—é –≤–æ–ª—à–µ–±–Ω—ã–µ –∫–∞–¥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–≤—Å–µ–≥–¥–∞! üì∑üí´",
    
    "üéâ –£—Ä–∞! –£ –Ω–∞—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç Versavija, –∏ —è –æ–±–æ–∂–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å! üì∏\n\n–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞–¥—Ä—ã! üåà",
    
    "üíù –¢—ë–ø–ª—ã–π –ø—Ä–∏—ë–º –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞!\n\n–ü—Ä–∏–≤–µ—Ç, {name}! Versavija –Ω–∞ —Å–≤—è–∑–∏! üòä\n\n–†–∞–¥–∞, —á—Ç–æ –Ω–∞—à–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —Å–µ–º—å—è —Å—Ç–∞–ª–∞ –±–æ–ª—å—à–µ!\n\n–í–º–µ—Å—Ç–µ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –º–æ–º–µ–Ω—Ç—ã! üì∏‚ú®",
    
    "ÔøΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤!\n\n–ü—Ä–∏–≤–µ—Ç! –Ø Versavija - –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏! üì∑\n\n–ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä - —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è!\n\n–†–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! üòç",
    
    "ÔøΩ –ù–æ–≤–æ–µ –ª–∏—Ü–æ –≤ –Ω–∞—à–µ–π –≥–∞–ª–µ—Ä–µ–µ!\n\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! Versavija –∑–¥–µ—Å—å! üëã\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!\n\n–í–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ! üì∏üíé",
    
    "ü¶ã –ö–∞–∫–∞—è –ø—Ä–∏—è—Ç–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞!\n\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! Versavija —Ä–∞–¥–∞ –Ω–æ–≤–æ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! üòä\n\n–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞ - —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Ä–æ–∂–¥–∞—é—Ç—Å—è —Å–∞–º—ã–µ –∫—Ä–∞—Å–∏–≤—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è! üì∑üåü",
    
    "üé® –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n\n–ü—Ä–∏–≤–µ—Ç, {name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç Versavija, –∏ —è –±–µ–∑—É–º–Ω–æ –ª—é–±–ª—é —Å–≤–æ—ë –¥–µ–ª–æ! üì∏\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π —É–≥–æ–ª–æ–∫ –∫—Ä–∞—Å–æ—Ç—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è! ‚ú®",
    
    "üå∫ –°–µ—Ä–¥–µ—á–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!\n\n–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, {name}! Versavija –Ω–∞ —Å–≤—è–∑–∏! üëã\n\n–¢–∞–∫ —Ä–∞–¥–∞, —á—Ç–æ –≤—ã –∑–¥–µ—Å—å!\n\n–í–º–µ—Å—Ç–µ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤! üì∑üíï",
    
    "üé™ –ü—Ä–∞–∑–¥–Ω–∏–∫ –∫ –Ω–∞–º –ø—Ä–∏—à—ë–ª!\n\n–£—Ä–∞! –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {name}! ü•≥\n\nVersavija –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!\n\n–ó–¥–µ—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–µ—á–∞—Ç–ª–µ—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ! üì∏üåà"
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
known_subscribers: Set[int] = set()
pending_welcomes: Dict[int, dict] = {}
client = None

def create_subscribers_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –ë–î"""
    try:
        conn = sqlite3.connect('data.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS subscribers (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                join_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logging.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")

async def get_channel_subscribers_simple():
    """–ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    global client
    
    try:
        from pyrogram import Client
        
        if not client:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            client = Client(
                SESSION_NAME,
                api_id=API_ID,
                api_hash=API_HASH,
                phone_number=PHONE_NUMBER,
                password=PASSWORD_2FA
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
            session_file = f"{SESSION_NAME}.session"
            if os.path.exists(session_file):
                logging.info("üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è")
            else:
                logging.info("üîê –ü–µ—Ä–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∫–æ–¥ –∏–∑ SMS")
                
            await client.start()
            logging.info("‚úÖ Client API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        subscribers = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º username
        channel_identifier = CHANNEL_USERNAME
        logging.info(f"üîç –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞: @{channel_identifier}")
        
        async for member in client.get_chat_members(channel_identifier):
            user = member.user
            if not user.is_bot:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
                user_data = {
                    'user_id': user.id,
                    'username': user.username,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'phone': getattr(user, 'phone_number', None),
                    'is_bot': user.is_bot,
                    'is_verified': getattr(user, 'is_verified', False),
                    'is_premium': getattr(user, 'is_premium', False),
                    'language_code': getattr(user, 'language_code', None),
                    'join_date': datetime.now(),
                    'status': 'active'
                }
                subscribers.append(user_data)
        
        logging.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(subscribers)} —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        return subscribers
        
    except ImportError:
        logging.error("‚ùå Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install pyrogram tgcrypto")
        return []
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return []

def save_subscriber(subscriber):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ –ë–î"""
    try:
        conn = sqlite3.connect('data.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO subscribers 
            (user_id, username, first_name)
            VALUES (?, ?, ?)
        ''', (
            subscriber['user_id'],
            subscriber['username'],
            subscriber['first_name']
        ))
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")

async def send_welcome_to_subscriber(subscriber):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫—É"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        name = subscriber['username'] if subscriber['username'] else subscriber['first_name'] or "–¥—Ä—É–≥"
        if name != "–¥—Ä—É–≥" and not name.startswith('@'):
            name = f"@{name}"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Versavija
        welcome_text = random.choice(WELCOME_MESSAGES).format(name=name)
        
        logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è {name}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ Bot API (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID)
        await bot.send_message(TARGET_CHANNEL_ID, welcome_text)
        
        logging.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {name}")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è {name if 'name' in locals() else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}: {e}")
        logging.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False

async def sync_subscribers():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    logging.info("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        current_subscribers = await get_channel_subscribers_simple()
        if not current_subscribers:
            logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –ë–î
        conn = sqlite3.connect('data.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM subscribers')
        known_ids = {row[0] for row in cursor.fetchall()}
        conn.close()
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        new_subscribers = []
        current_user_ids = {subscriber['user_id'] for subscriber in current_subscribers}
        
        for subscriber in current_subscribers:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            save_subscriber(subscriber)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–¥–ø–∏—Å—á–∏–∫
            if subscriber['user_id'] not in known_ids:
                new_subscribers.append(subscriber)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        unsubscribed_ids = known_ids - current_user_ids
        if unsubscribed_ids:
            logging.info(f"üì§ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(unsubscribed_ids)} –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            try:
                conn = sqlite3.connect('data.db')
                cursor = conn.cursor()
                for user_id in unsubscribed_ids:
                    cursor.execute('DELETE FROM subscribers WHERE user_id = ?', (user_id,))
                    logging.info(f"‚ûñ –£–¥–∞–ª–µ–Ω –æ—Ç–ø–∏—Å–∞–≤—à–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")
                conn.commit()
                conn.close()
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è: {e}")
        
        if new_subscribers:
            logging.info(f"üéâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(new_subscribers)} –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –°–†–ê–ó–£
            for subscriber in new_subscribers:
                name = subscriber['username'] or subscriber['first_name'] or "–Ω–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫"
                user_id = subscriber['user_id']
                
                logging.info(f"‚ûï –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {name} (ID: {user_id})")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–∞–∑—É
                success = await send_welcome_to_subscriber(subscriber)
                if success:
                    logging.info(f"üì® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {name}")
                else:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {name}")
        else:
            logging.info("üìä –ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

async def process_pending_welcomes():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    global pending_welcomes
    
    if not pending_welcomes:
        return  # –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
        
    logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(pending_welcomes)} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π...")
    
    current_time = datetime.now()
    to_remove = []
    
    for user_id, data in pending_welcomes.items():
        welcome_time = data['welcome_time']
        time_left = (welcome_time - current_time).total_seconds()
        
        logging.info(f"‚è∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –æ—Å—Ç–∞–ª–æ—Å—å {time_left:.1f}—Å –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
        
        if current_time >= welcome_time:
            # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            logging.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
            success = await send_welcome_to_subscriber(data['subscriber'])
            if success:
                logging.info(f"üì® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {WELCOME_DELAY}—Å")
            to_remove.append(user_id)
    
    # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    for user_id in to_remove:
        del pending_welcomes[user_id]
        logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π")

async def subscriber_monitoring_task():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    while True:
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            await sync_subscribers()
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (30 —Å–µ–∫—É–Ω–¥)
            await asyncio.sleep(30)
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
            await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É

async def setup_simple_tracking():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    logging.info("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ë–î
    create_subscribers_table()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    try:
        conn = sqlite3.connect('data.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM subscribers')
        global known_subscribers
        known_subscribers = {row[0] for row in cursor.fetchall()}
        conn.close()
        logging.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(known_subscribers)} –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –ë–î")
    except:
        pass
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    asyncio.create_task(subscriber_monitoring_task())
    
    logging.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≥–æ—Ç–æ–≤–∞!")
    logging.info("üì± –ö–æ–º–∞–Ω–¥—ã: /sync_subscribers, /subscriber_stats")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@dp.message(Command(commands=['sync_subscribers']))
async def sync_subscribers_command(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    await message.reply("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")
    await sync_subscribers()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    conn = sqlite3.connect('data.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM subscribers')
    total = cursor.fetchone()[0]
    conn.close()
    
    await message.reply(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total}\n‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {len(pending_welcomes)}")

if __name__ == "__main__":
    print("üéØ –ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ü–û–î–ü–ò–°–ß–ò–ö–û–í")
    print("="*50)
    print("‚ö° –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    print("üìä –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    print("üéØ –ò–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π")
    asyncio.run(setup_simple_tracking())