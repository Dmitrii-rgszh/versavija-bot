import asyncio
import logging
import pathlib
import json
import os
from collections import Counter
from typing import Awaitable, Callable, Optional

from aiogram.exceptions import (
    TelegramBadRequest,
    TelegramForbiddenError,
    TelegramNotFound,
    TelegramRetryAfter,
)
from aiogram.dispatcher.event.bases import SkipHandler
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import db_async
from bot_constants import DEFAULT_MENU, MENU_MESSAGES

from config import bot, dp
from config import DEFAULT_CITY_NAME, DEFAULT_CITY_CENTER, MAP_ZOOM_DEFAULT
from utils import yandex_link_for_city, parse_yandex_coords, resolve_yandex_url, fetch_yandex_coords_from_html, parse_plain_coords, reverse_geocode_nominatim, parse_yandex_address_from_url, fetch_yandex_address_from_html
from admin_state import ADMIN_PENDING_ACTIONS
from admin_utils import is_admin_view_enabled, user_is_admin
from booking_handlers import inject_booking_status_button, catch_yandex_link
from db import (
    get_setting,
    set_setting,
    save_menu,
    get_pending_actions,
    save_pending_actions,
    add_user,
    get_all_users,
    add_promotion,
    get_active_promotions,
    get_all_promotions,
    delete_promotion,
    cleanup_expired_promotions,
)
from portfolio_handlers import handle_portfolio_pending_action
from content_handlers import handle_content_pending_action
from keyboards import (
    build_main_keyboard_from_menu,
    admin_panel_keyboard,
    build_category_admin_keyboard,
    build_category_delete_keyboard,
    build_category_photo_nav_keyboard,
    build_category_delete_viewer_keyboard,
    build_categories_admin_root_keyboard,
    build_confirm_delete_category_kb,
    build_undo_category_delete_kb,
    build_undo_photo_delete_kb,
    build_add_photos_in_progress_kb,
    build_confirm_delete_all_photos_kb,
    build_services_keyboard,
    build_wedding_packages_nav_keyboard,
    broadcast_confirm_keyboard,
    build_broadcast_image_keyboard,
    build_broadcast_confirm_keyboard,
    build_promotions_keyboard,
    build_add_promotion_keyboard,
    build_promotion_date_keyboard,
    build_promotion_image_keyboard,
)

WELCOME_TEXT = (
    "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
)

# –ï–¥–∏–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–µ–Ω—é —Å —ç–º–æ–¥–∑–∏ üëá
BROADCAST_BATCH_SIZE = 20
BROADCAST_BATCH_DELAY = 1.0
BROADCAST_PER_MESSAGE_DELAY = 0.05
BROADCAST_MAX_RETRIES = 2


class BroadcastStates(StatesGroup):
    awaiting_text = State()
    awaiting_image = State()
    confirming = State()


async def _set_static_commands() -> None:
    try:
        await bot.delete_my_commands()
        await bot.set_my_commands([
            BotCommand(command='start', description='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
            BotCommand(command='portfolio', description='üì∏ –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ'),
            BotCommand(command='services', description='üí∞ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã'),
            BotCommand(command='booking', description='üìÖ –ó–∞–ø–∏—Å—å'),
            BotCommand(command='promotions', description='üéâ –ê–∫—Ü–∏–∏'),
            BotCommand(command='reviews', description='‚≠ê –û—Ç–∑—ã–≤—ã'),
            BotCommand(command='social', description='üì± –°–æ—Ü—Å–µ—Ç–∏'),
            BotCommand(command='adminmode_on', description='–í–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º'),
            BotCommand(command='adminmode_off', description='–í—ã–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º'),
        ])
    except Exception:
        logging.exception('Failed to set bot commands')

# Wedding packages data
WEDDING_PACKAGES = [
    {
        "title": "–ü–ê–ö–ï–¢ 1",
        "text": """–ü–†–ê–ô–° –°–í–ê–î–ï–ë–ù–´–ôü§µüë∞
–ü–ê–ö–ï–¢ 1 
 
- –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–≤–∞–¥—å–±–µ 
- —Ä–µ–ø–æ—Ä—Ç–∞–∂–Ω–∞—è –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—ä–µ–º–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3-—Ö —á–∞—Å–æ–≤.
- –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ:
15-—Ä–µ—Ç—É—à—å
60-70 —Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è.
 
-–ø—Ä–µ–≤—å—é –∏–∑ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ç–µ—á–µ–Ω–∏–∏ 2-7 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Å–≤–∞–¥—å–±—ã 
- –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —è–Ω–¥–µ–∫—Å –¥–∏—Å–∫ –∏–ª–∏ –Ω–∞ –≤–∞—à–µ–º –Ω–æ—Å–∏—Ç–µ–ª–µ.
- —Å—Ä–æ–∫ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É 2,5 –Ω. - 1 –º–µ—Å.

18000—Ä 
 
* –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å —Å—ä–µ–º–∫–∏ - 6000 —Ä 
** –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –ø–æ—Å–ª–µ, –≤–æ –≤—Ä–µ–º—è - –ø–µ—Ä–µ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Å –º–æ–ª–æ–¥–æ–∂—ë–Ω–∞–º–∏"""
    },
    {
        "title": "–ü–ê–ö–ï–¢ 2",
        "text": """–ü–†–ê–ô–° –°–í–ê–î–ï–ë–ù–´–ôü§µüë∞
–ü–ê–ö–ï–¢ 2 
 
- –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–≤–∞–¥—å–±–µ 
- —Ä–µ–ø–æ—Ä—Ç–∞–∂–Ω–∞—è –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—ä–µ–º–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 —á–∞—Å–æ–≤ 
- –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ:
25 - —Ä–µ—Ç—É—à—å.
100-120 —Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
- –ø—Ä–µ–≤—å—é –∏–∑ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ç–µ—á–µ–Ω–∏–∏ 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Å–≤–∞–¥—å–±—ã 
- –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —è–Ω–¥–µ–∫—Å –¥–∏—Å–∫ –∏–ª–∏ –Ω–∞ –≤–∞—à–µ–º –Ω–æ—Å–∏—Ç–µ–ª–µ ( –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ )
- —Å—Ä–æ–∫ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É 3 –Ω. - 1,5 –º–µ—Å. ( –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏).

25.000 —Ä 
 
* –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å —Å—ä–µ–º–∫–∏ - 5.000 —Ä 
** –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –ø–æ—Å–ª–µ, –≤–æ –≤—Ä–µ–º—è - –ø–µ—Ä–µ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Å –º–æ–ª–æ–¥–æ–∂—ë–Ω–∞–º–∏"""
    },
    {
        "title": "–ü–ê–ö–ï–¢ 3",
        "text": """–ü–†–ê–ô–° –°–í–ê–î–ï–ë–ù–´–ôü§µüë∞
–ü–ê–ö–ï–¢ 3 
 
- –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–≤–∞–¥—å–±–µ 
- —Ä–µ–ø–æ—Ä—Ç–∞–∂–Ω–∞—è –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—ä–µ–º–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 8 —á–∞—Å–æ–≤ 
- –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ:
40 - —Ä–µ—Ç—É—à—å
150-160 —Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è

- –ø—Ä–µ–≤—å—é –∏–∑ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª–∏ –ø–æ—Å–ª–µ —Å–≤–∞–¥—å–±—ã 
- –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —è–Ω–¥–µ–∫—Å –¥–∏—Å–∫ –∏–ª–∏ –Ω–∞ –≤–∞—à–µ–º –Ω–æ—Å–∏—Ç–µ–ª–µ ( –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ) - —Å—Ä–æ–∫ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É 1 - 2 –º–µ—Å—è—Ü. 
 
35000 —Ä 
 
** –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å —Å—ä–µ–º–∫–∏ - 6000 —Ä 
*** –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –ø–æ—Å–ª–µ, –≤–æ –≤—Ä–µ–º—è - –ø–µ—Ä–µ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Å –º–æ–ª–æ–¥–æ–∂—ë–Ω–∞–º–∏"""
    },
    {
        "title": "–ü–ê–ö–ï–¢ 4",
        "text": """–ü–†–ê–ô–° –°–í–ê–î–ï–ë–ù–´–ôü§µüë∞
–ü–ê–ö–ï–¢ 4 
 
"–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å +" 
 
- –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–≤–∞–¥—å–±–µ 
- —Ä–µ–ø–æ—Ä—Ç–∞–∂–Ω–∞—è –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—ä—ë–º–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤ 
- –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ:
60 —Ä–µ—Ç—É—à—å
300 —Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è.
- –ø—Ä–µ–≤—å—é –∏–∑ 20 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Å–≤–∞–¥—å–±—ã 
- –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —è–Ω–¥–µ–∫—Å –¥–∏—Å–∫ –∏–ª–∏ –Ω–∞ –≤–∞—à–µ–º –Ω–æ—Å–∏—Ç–µ–ª–µ ( –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ)
- —Å—Ä–æ–∫ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É 1,5 - 2,5 –º–µ—Å—è—Ü–∞. 
 
62.000 —Ä 
 
* —Å—ä–µ–º–∫–∞ LoveStory –≤ –ü–û–î–ê–†–û–ö 
** –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å —Å—ä–µ–º–∫–∏ - 6000 —Ä 
*** –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –ø–æ—Å–ª–µ, –≤–æ –≤—Ä–µ–º—è - –ø–µ—Ä–µ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Å –º–æ–ª–æ–¥–æ–∂–µ–Ω–∞–º–∏"""
    }
]

# Lingerie service information
LINGERIE_SERVICE = {
    "title": "Lingerie (–±—É–¥—É–∞—Ä–Ω–∞—è)",
    "text": """üíã Lingerie (–±—É–¥—É–∞—Ä–Ω–∞—è).

7.000 —Ä—É–±–ª–µ–π

1 —á–∞—Å —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∏.
2 –æ–±—Ä–∞–∑–∞
–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å—ä–µ–º–∫–µ
–ü–æ–¥–±–æ—Ä –º–µ—Å—Ç –¥–ª—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–π 
30-35 –∫–∞–¥—Ä–æ–≤ –≤ –∞–≤—Ç–æ—Ä—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
10 –∫–∞–¥—Ä–æ–≤ –≤ —Ä–µ—Ç—É—à–∏.
–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –ø–æ–¥–±–æ—Ä–æ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –∏ –ø–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–ê—Ä–µ–Ω–¥–∞ —Å—Ç—É–¥–∏–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ 
–ó–∞–∫—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º –¥–∏—Å–∫–µ
 
‚ùóÔ∏è–ë—Ä–æ–Ω—å —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã.

–ì–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è."""
}

# Reportage service information  
REPORTAGE_SERVICE = {
    "title": "–†–µ–ø–æ—Ä—Ç–∞–∂–Ω–∞—è",
    "text": """üì∏ –†–µ–ø–æ—Ä—Ç–∞–∂–Ω–∞—è 

–û—Ç 3.000 —Ä—É–±–ª–µ–π –∑–∞ —á–∞—Å
–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏.
–û—Ç 30 –∏ –¥–æ 50 –≤ –∞–≤—Ç–æ—Ä—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ.
5 –∫–∞–¥—Ä–æ–≤ –≤ —Ä–µ—Ç—É—à–∏.
–ó–∞–∫—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º –¥–∏—Å–∫–µ.

‚ùóÔ∏è–ë—Ä–æ–Ω—å —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã.

–ì–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è."""
}

# Common service text for individual categories
_COMMON_SERVICE_TEXT = """–ü—Ä–∞–π—Å
5.000 —Ä—É–±–ª–µ–π

1 —á–∞—Å —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∏.
2 –æ–±—Ä–∞–∑–∞
–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å—ä–µ–º–∫–µ
–ü–æ–¥–±–æ—Ä –º–µ—Å—Ç –¥–ª—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–π
30-35 –∫–∞–¥—Ä–æ–≤ –≤ –∞–≤—Ç–æ—Ä—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
5 –∫–∞–¥—Ä–∞ –≤ —Ä–µ—Ç—É—à–∏.
–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –ø–æ–¥–±–æ—Ä–æ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –∏ –ø–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º
–ê—Ä–µ–Ω–¥–∞ —Å—Ç—É–¥–∏–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
–ó–∞–∫—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º –¥–∏—Å–∫–µ

‚ùóÔ∏è–ë—Ä–æ–Ω—å —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã.
–ì–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è."""

# Individual service information
INDIVIDUAL_SERVICE = {
    "title": "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è",
    "text": f"üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è\n\n{_COMMON_SERVICE_TEXT}"
}

# Mom and child service information
MOM_CHILD_SERVICE = {
    "title": "–ú–∞–º–∞ –∏ —Ä–µ–±–µ–Ω–æ–∫",
    "text": f"üë©‚Äçüë∂ –ú–∞–º–∞ –∏ —Ä–µ–±–µ–Ω–æ–∫\n\n{_COMMON_SERVICE_TEXT}"
}

# Love story service information
LOVE_STORY_SERVICE = {
    "title": "Love Story",
    "text": f"üíï Love Story\n\n{_COMMON_SERVICE_TEXT}"
}

# Family service information
FAMILY_SERVICE = {
    "title": "–°–µ–º–µ–π–Ω–∞—è",
    "text": f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω–∞—è\n\n{_COMMON_SERVICE_TEXT}"
}

# Children service information
CHILDREN_SERVICE = {
    "title": "–î–µ—Ç—Å–∫–∞—è (—Å–∞–¥–∏–∫–∏/—à–∫–æ–ª—ã)",
    "text": f"üßí –î–µ—Ç—Å–∫–∞—è (—Å–∞–¥–∏–∫–∏/—à–∫–æ–ª—ã)\n\n{_COMMON_SERVICE_TEXT}"
}

# –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞: username -> action
# persisted to DB so flow survives restarts
try:
    ADMIN_PENDING_ACTIONS: dict = get_pending_actions()
    if ADMIN_PENDING_ACTIONS:
        legacy = [
            key
            for key, value in list(ADMIN_PENDING_ACTIONS.items())
            if (
                (isinstance(value, dict) and value.get('action') in {'broadcast_text', 'broadcast_image'})
                or (isinstance(value, str) and value.startswith('broadcast'))
            )
        ]
        if legacy:
            for key in legacy:
                ADMIN_PENDING_ACTIONS.pop(key, None)
            save_pending_actions(ADMIN_PENDING_ACTIONS)
except Exception:
    # If DB not initialized yet, use empty dict
    ADMIN_PENDING_ACTIONS: dict = {}
## Admin commands removed by request: /adminmode and refresh/sync commands


@dp.message(Command(commands=['start']))
async def send_welcome(message: Message):
    username = (message.from_user.username or "").lstrip("@").lower()
    user_id = message.from_user.id
    
    # Save user to database for broadcast functionality
    await db_async.add_user(
        user_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    
    is_admin = await is_admin_view_enabled(username, user_id)
    # load menu from DB (default menu if none)
    menu = await db_async.get_menu(DEFAULT_MENU)
    keyboard = build_main_keyboard_from_menu(menu, is_admin)
    keyboard = await inject_booking_status_button(keyboard, user_id)
    await _set_static_commands()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –º–µ–Ω—é –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    image_file_id = await db_async.get_setting('welcome_image_file_id', None)
    
    # –µ—Å–ª–∏ –≤ –ë–î –µ—Å—Ç—å file_id ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if image_file_id:
        try:
            await message.answer_photo(
                photo=image_file_id, 
                caption=MENU_MESSAGES["main"], 
                reply_markup=keyboard
            )
            return  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º
        except Exception:
            logging.exception('Failed to send photo by file_id, will try local file')
    
    # Fallback to local file
    media_path = pathlib.Path(__file__).parent / 'media' / 'greetings.png'
    if media_path.exists():
        photo = FSInputFile(pathlib.Path(media_path))
        try:
            await message.answer_photo(
                photo=photo, 
                caption=MENU_MESSAGES["main"], 
                reply_markup=keyboard
            )
            return  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º
        except Exception:
            logging.exception('Failed to send local photo')

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await message.answer(MENU_MESSAGES["main"], reply_markup=keyboard)
        logging.info("Text menu sent to chat %s (user=%s)", message.chat.id, username)
    except Exception:
        logging.exception("Failed to send menu message")


    # End of send_welcome

@dp.message(Command(commands=['get_chat_id']))  
async def get_chat_id_command(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ - –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã"""
    try:
        chat_info = await message.bot.get_chat(message.chat.id)
        
        result = f"""üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**

**ID:** `{message.chat.id}`
**–¢–∏–ø:** {chat_info.type}
**–ù–∞–∑–≤–∞–Ω–∏–µ:** {chat_info.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
**Username:** @{chat_info.username or '–ù–µ—Ç username'}

üí° **–î–ª—è welcome messages –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**
```python
TARGET_GROUP_ID = {message.chat.id}
```

üîß **–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞:**
‚Ä¢ {'‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π' if chat_info.type in ['group', 'supergroup'] else '‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è'}
"""
        
        await message.reply(result, parse_mode="Markdown")
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {e}")


async def update_promotion_message(query, promotion_idx: int, promotions: list, is_admin: bool = False):
    """Update existing promotion message with navigation."""
    if not promotions:
        await query.message.edit_text("üéâ –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ü–∏–π.")
        return
    
    # Ensure valid index
    if promotion_idx >= len(promotions):
        promotion_idx = 0
    elif promotion_idx < 0:
        promotion_idx = len(promotions) - 1
    
    promotion = promotions[promotion_idx]
    promo_id, title, description, image_file_id, start_date, end_date, created_by = promotion
    
    # Format the message
    from datetime import datetime
    try:
        end_date_obj = datetime.strptime(end_date, '%Y-%m-%d')
        formatted_end_date = end_date_obj.strftime('%d.%m.%Y')
    except:
        formatted_end_date = end_date
    
    text = f"üéâ {title}\n\n{description}\n\nüìÖ –ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {formatted_end_date}"
    
    if len(promotions) > 1:
        text += f"\n\nüìÑ {promotion_idx + 1} –∏–∑ {len(promotions)}"
    
    kb = build_promotions_keyboard(promotion_idx, is_admin)
    
    # Check if the current message has photo
    current_has_photo = query.message.photo is not None
    new_has_photo = image_file_id is not None
    
    try:
        if current_has_photo and new_has_photo:
            # Both current and new message have photos - update media
            from aiogram.types import InputMediaPhoto
            media = InputMediaPhoto(media=image_file_id, caption=text)
            await query.message.edit_media(media=media, reply_markup=kb)
        elif current_has_photo and not new_has_photo:
            # Current has photo, new doesn't - delete current and send text message
            await query.message.delete()
            from config import bot
            await bot.send_message(chat_id=query.message.chat.id, text=text, reply_markup=kb)
        elif not current_has_photo and new_has_photo:
            # Current is text, new has photo - delete current and send photo message
            await query.message.delete()
            from config import bot
            await bot.send_photo(chat_id=query.message.chat.id, photo=image_file_id, caption=text, reply_markup=kb)
        else:
            # Both are text messages - edit text
            await query.message.edit_text(text, reply_markup=kb)
    except Exception as e:
        logging.warning(f"Failed to update promotion message: {e}")
        # Fallback: delete current message and send new one
        try:
            await query.message.delete()
            from config import bot
            if image_file_id:
                await bot.send_photo(chat_id=query.message.chat.id, photo=image_file_id, caption=text, reply_markup=kb)
            else:
                await bot.send_message(chat_id=query.message.chat.id, text=text, reply_markup=kb)
        except Exception as e2:
            logging.error(f"Fallback also failed: {e2}")
            # Last resort: just edit the text without image
            try:
                await query.message.edit_text(text, reply_markup=kb)
            except:
                pass


async def show_promotion(message, promotion_idx: int, promotions: list = None, is_admin: bool = False):
    """Show a specific promotion with navigation."""
    if promotions is None:
        promotions = get_active_promotions()
    
    if not promotions:
        if is_admin:
            kb = build_add_promotion_keyboard()
            await message.answer(
                "üéâ –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ü–∏–π. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º! üòä", 
                reply_markup=kb
            )
        else:
            await message.answer("üéâ –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ü–∏–π. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º! üòä")
        return
    
    # Ensure valid index
    if promotion_idx >= len(promotions):
        promotion_idx = 0
    elif promotion_idx < 0:
        promotion_idx = len(promotions) - 1
    
    promotion = promotions[promotion_idx]
    promo_id, title, description, image_file_id, start_date, end_date, created_by = promotion
    
    # Format the message
    from datetime import datetime
    try:
        end_date_obj = datetime.strptime(end_date, '%Y-%m-%d')
        formatted_end_date = end_date_obj.strftime('%d.%m.%Y')
    except:
        formatted_end_date = end_date
    
    text = f"üéâ {title}\n\n{description}\n\nüìÖ –ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {formatted_end_date}"
    
    if len(promotions) > 1:
        text += f"\n\nüìÑ {promotion_idx + 1} –∏–∑ {len(promotions)}"
    
    kb = build_promotions_keyboard(promotion_idx, is_admin)
    
    try:
        if image_file_id:
            await message.answer_photo(photo=image_file_id, caption=text, reply_markup=kb)
        else:
            await message.answer(text, reply_markup=kb)
    except Exception as e:
        logging.warning(f"Failed to send promotion: {e}")
        await message.answer(text, reply_markup=kb)


@dp.message(Command(commands=['services']))
async def cmd_services(message: Message):
    """Handle /services command"""
    kb = build_services_keyboard()
    await message.answer(MENU_MESSAGES["services"], reply_markup=kb)

@dp.message(Command(commands=['promotions']))
async def cmd_promotions(message: Message):
    """Handle /promotions command"""
    username = (message.from_user.username or "").lstrip("@").lower()
    
    # Cleanup expired promotions first
    cleanup_expired_promotions()
    
    # Get active promotions
    promotions = get_active_promotions()
    is_admin = await is_admin_view_enabled(username, message.from_user.id)
    
    if not promotions:
        # No active promotions
        if is_admin:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é", callback_data="add_promotion")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_main")]
            ])
            await message.answer("üéâ –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ü–∏–π.\n\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∞–∫—Ü–∏—é:", reply_markup=kb)
        else:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_main")]
            ])
            await message.answer("üéâ –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ü–∏–π.", reply_markup=kb)
        return
    
    # Show first promotion
    await show_promotion(message, 0, promotions, is_admin)

@dp.callback_query()
async def handle_callback(query: CallbackQuery, state: FSMContext):
    # Fix for UnboundLocalError: explicitly declare imported classes as global
    global InlineKeyboardMarkup, InlineKeyboardButton
    
    data_raw = query.data or ""
    data = data_raw.lower()
    username = (query.from_user.username or "").lstrip("@").lower()

    if data_raw and (data_raw == 'booking' or data.startswith('bk_') or data_raw == 'booking_status'):
        raise SkipHandler()

    if data_raw and (
        data_raw == 'portfolio'
        or data.startswith('pf_')
        or data.startswith('pf:')
        or data.startswith('like:')
    ):
        raise SkipHandler()

    if data_raw and (
        data_raw == 'reviews'
        or data_raw == 'social'
        or data_raw == 'social_edit'
        or data.startswith('reviews_')
    ):
        raise SkipHandler()

    # quick debug log to capture what callback data arrives from the client
    logging.info("HANDLER VERSION vDel2 | user=%s raw=%s lowered=%s", username, data_raw, data)

    try:
        await query.answer()
    except Exception:
        pass

    # public actions
    if data == "services":
        kb = build_services_keyboard()
        await query.message.answer(MENU_MESSAGES["services"], reply_markup=kb)
        return

    if data == "back_main":
        menu = await db_async.get_menu(DEFAULT_MENU)
        is_admin = await is_admin_view_enabled(username, query.from_user.id)
        kb = build_main_keyboard_from_menu(menu, is_admin)
        kb = await inject_booking_status_button(kb, query.from_user.id)
        await query.message.answer(MENU_MESSAGES["main"], reply_markup=kb)
        return

    if data == "promotions":
        # Cleanup expired promotions first
        cleanup_expired_promotions()
        
        # Get active promotions
        promotions = get_active_promotions()
        is_admin = await is_admin_view_enabled(username, query.from_user.id)
        
        if not promotions:
            # No active promotions
            if is_admin:
                kb = build_add_promotion_keyboard()
                await query.message.answer(
                    "üéâ –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ü–∏–π. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º! üòä", 
                    reply_markup=kb
                )
            else:
                await query.message.answer("üéâ –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ü–∏–π. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º! üòä")
            return
        
        # Show first promotion
        await show_promotion(query.message, 0, promotions, is_admin)
        return

    # Handle promotion navigation
    if data.startswith("promo_prev:") or data.startswith("promo_next:"):
        # Cleanup expired promotions first
        cleanup_expired_promotions()
        
        # Get active promotions
        promotions = get_active_promotions()
        is_admin = await is_admin_view_enabled(username, query.from_user.id)
        
        if not promotions:
            await query.message.answer("üéâ –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ü–∏–π.")
            return
        
        # Extract current index
        try:
            current_idx = int(data.split(":", 1)[1])
        except (ValueError, IndexError):
            current_idx = 0
        
        # Calculate new index
        if data.startswith("promo_prev:"):
            new_idx = (current_idx - 1) % len(promotions)
        else:  # promo_next
            new_idx = (current_idx + 1) % len(promotions)
        
        # Update the promotion message with new index
        try:
            await update_promotion_message(query, new_idx, promotions, is_admin)
        except Exception as e:
            # Fallback to first promotion if something goes wrong
            await update_promotion_message(query, 0, promotions, is_admin)
        return
    
    if data == "wedding_packages":
        # Show first wedding package
        package = WEDDING_PACKAGES[0]
        kb = build_wedding_packages_nav_keyboard(0)
        await query.message.answer(package["text"], reply_markup=kb)
        return
    
    if data == "lingerie_service":
        # Show lingerie service information
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –£—Å–ª—É–≥–∏", callback_data="services")]
        ])
        await query.message.answer(LINGERIE_SERVICE["text"], reply_markup=kb)
        return
    
    if data == "reportage_service":
        # Show reportage service information
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –£—Å–ª—É–≥–∏", callback_data="services")]
        ])
        await query.message.answer(REPORTAGE_SERVICE["text"], reply_markup=kb)
        return
    
    if data == "individual_service":
        # Show individual service information
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –£—Å–ª—É–≥–∏", callback_data="services")]
        ])
        await query.message.answer(INDIVIDUAL_SERVICE["text"], reply_markup=kb)
        return
    
    if data == "mom_child_service":
        # Show mom and child service information
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –£—Å–ª—É–≥–∏", callback_data="services")]
        ])
        await query.message.answer(MOM_CHILD_SERVICE["text"], reply_markup=kb)
        return
    
    if data == "love_story_service":
        # Show love story service information
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –£—Å–ª—É–≥–∏", callback_data="services")]
        ])
        await query.message.answer(LOVE_STORY_SERVICE["text"], reply_markup=kb)
        return
    
    if data == "family_service":
        # Show family service information
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –£—Å–ª—É–≥–∏", callback_data="services")]
        ])
        await query.message.answer(FAMILY_SERVICE["text"], reply_markup=kb)
        return
    
    if data == "children_service":
        # Show children service information
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –£—Å–ª—É–≥–∏", callback_data="services")]
        ])
        await query.message.answer(CHILDREN_SERVICE["text"], reply_markup=kb)
        return
    
    if data.startswith("wedding_pkg_prev:") or data.startswith("wedding_pkg_next:"):
        # Handle wedding package navigation
        try:
            if data.startswith("wedding_pkg_prev:"):
                current_idx = int(data.split(":", 1)[1])
                # Calculate previous index (cycle through packages backwards)
                next_idx = (current_idx - 1) % len(WEDDING_PACKAGES)
            else:  # wedding_pkg_next:
                current_idx = int(data.split(":", 1)[1])
                # Calculate next index (cycle through packages forward)
                next_idx = (current_idx + 1) % len(WEDDING_PACKAGES)
            
            package = WEDDING_PACKAGES[next_idx]
            kb = build_wedding_packages_nav_keyboard(next_idx)
            await query.message.edit_text(package["text"], reply_markup=kb)
        except (ValueError, IndexError):
            # Fallback to first package
            package = WEDDING_PACKAGES[0]
            kb = build_wedding_packages_nav_keyboard(0)
            await query.message.edit_text(package["text"], reply_markup=kb)
        return
    
    if data == "main_menu":
        # Return to main menu
        menu = await db_async.get_menu(DEFAULT_MENU)
        is_admin = await is_admin_view_enabled(username, query.from_user.id)
        keyboard = build_main_keyboard_from_menu(menu, is_admin)
        keyboard = await inject_booking_status_button(keyboard, query.from_user.id)
        await query.message.answer(MENU_MESSAGES["main"], reply_markup=keyboard)
        return
    
    # booking flow handled later (remove early stub)
async def perform_broadcast(text: str, image_file_id: str = None, message: Message = None):
    """Send broadcast message to all users."""
    async def _send_to_user(user_id: int) -> tuple[bool, Optional[str]]:
        """Helper that dispatches message/photo to –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        async def _dispatch() -> None:
            if image_file_id:
                await bot.send_photo(user_id, image_file_id, caption=text)
            else:
                await bot.send_message(user_id, text)

        return await _broadcast_send_with_retry(user_id, _dispatch, max_retries=BROADCAST_MAX_RETRIES)

    users = await asyncio.to_thread(get_all_users)
    total = len(users)
    sent = 0
    failures = Counter()

    broadcast_type = "—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º" if image_file_id else "—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"
    if message:
        await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É ({broadcast_type}) –¥–ª—è {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    if total == 0:
        if message:
            await message.answer("‚ÑπÔ∏è –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    for idx, (user_id, username, first_name, last_name) in enumerate(users, start=1):
        success, reason = await _send_to_user(user_id)
        if success:
            sent += 1
        else:
            failures[reason or 'unknown'] += 1

        # –ü–ª–∞–≤–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if idx < total:
            if idx % BROADCAST_BATCH_SIZE == 0:
                await asyncio.sleep(BROADCAST_BATCH_DELAY)
            else:
                await asyncio.sleep(BROADCAST_PER_MESSAGE_DELAY)

    failed = total - sent

    summary_lines = [
        "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}",
        f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}",
        f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}",
    ]
    if failures:
        breakdown = ', '.join(f"{reason}: {count}" for reason, count in failures.most_common())
        summary_lines.append(f"‚ÑπÔ∏è –ü—Ä–∏—á–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞–≤–∫–∏: {breakdown}")

    result_text = "\n".join(summary_lines)
    if message:
        await message.answer(result_text)


async def _broadcast_send_with_retry(
    user_id: int,
    dispatcher: Callable[[], Awaitable[None]],
    max_retries: int = 2,
) -> tuple[bool, Optional[str]]:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É—á—ë—Ç–æ–º FloodWait/retry.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (success: bool, reason: str | None).
    """
    attempt = 0
    while True:
        try:
            await dispatcher()
            return True, None
        except TelegramRetryAfter as exc:
            attempt += 1
            if attempt > max_retries:
                logging.warning('FloodWait limit –¥–ª—è %s: %s', user_id, exc)
                return False, 'flood_wait'
            delay = exc.retry_after + 0.5
            logging.info('FloodWait %ss –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s, –ø–æ–≤—Ç–æ—Ä #%s', delay, user_id, attempt)
            await asyncio.sleep(delay)
        except (TelegramForbiddenError, TelegramNotFound) as exc:
            logging.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: %s', user_id, exc)
            return False, 'unreachable'
        except TelegramBadRequest as exc:
            logging.warning('–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s', user_id, exc)
            return False, 'bad_request'
        except Exception as exc:
            attempt += 1
            logging.warning('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s (–ø–æ–ø—ã—Ç–∫–∞ %s/%s): %s', user_id, attempt, max_retries + 1, exc)
            if attempt > max_retries:
                return False, exc.__class__.__name__.lower()
            await asyncio.sleep(1.0)


@dp.message()
async def handle_admin_pending(message: Message, state: FSMContext):
    username = (message.from_user.username or "").lstrip("@").lower()
    # allow only if admin mode ON (else ignore silently)
    if not await is_admin_view_enabled(username, message.from_user.id):
        return

    current_state = await state.get_state()
    if current_state in BroadcastStates.__all_states__:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
        return

    try:
        pend_raw = await db_async.get_setting(f'pending_booking_{message.from_user.id}', None)
        if pend_raw:
            pend = json.loads(pend_raw)
        else:
            pend = None
    except Exception:
        pend = None
    if isinstance(pend, dict) and pend.get('await_loc'):
        await catch_yandex_link(message)
        return

    action = ADMIN_PENDING_ACTIONS.get(username)
    if not action:
        return



    # Handle different action types
    if action and isinstance(action, dict):
        a = action.get('action')
        payload = action.get('payload', {})
    elif action and isinstance(action, str):
        # Handle old string format (for backward compatibility)
        a = action
        payload = {}
    else:
        return

    # Process other admin actions
    a = action.get('action')
    payload = action.get('payload', {})
    logging.info('Admin pending action for %s: %s', username, a)

    if await handle_portfolio_pending_action(message, username, a, payload):
        return
    if await handle_content_pending_action(message, username, a, payload):
        return
    # --- Photo/category & menu editing handlers (single consolidated block) ---
    # Promotion management cases
    if a == 'add_promotion_title':
        if not message.text:
            await message.answer('‚ùå –û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            return
        title = message.text.strip()
        if not title:
            await message.answer('‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            return
        
        ADMIN_PENDING_ACTIONS[username] = {'action': 'add_promotion_description', 'payload': {'title': title}}
        save_pending_actions(ADMIN_PENDING_ACTIONS)
        await message.answer(f'‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: "{title}"\n\nüìù –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:')
        return
    
    if a == 'add_promotion_description':
        if not message.text:
            await message.answer('‚ùå –û–∂–∏–¥–∞—é —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            return
        description = message.text.strip()
        if not description:
            await message.answer('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            return
        
        title = payload.get('title')
        ADMIN_PENDING_ACTIONS[username] = {
            'action': 'add_promotion_image', 
            'payload': {'title': title, 'description': description}
        }
        save_pending_actions(ADMIN_PENDING_ACTIONS)
        await message.answer(f'‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\nüñºÔ∏è –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ü–∏–∏:', reply_markup=build_promotion_image_keyboard())
        return
    
    if a == 'add_promotion_image':
        title = payload.get('title')
        description = payload.get('description')
        image_file_id = None
        
        # Handle image
        photo = None
        if message.photo:
            photo = message.photo[-1]
        elif message.document and message.document.mime_type and message.document.mime_type.startswith('image'):
            image_file_id = message.document.file_id
        
        if photo:
            image_file_id = photo.file_id
        
        if not image_file_id:
            await message.answer('‚ùå –û–∂–∏–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ë–µ–∑ —Ñ–æ—Ç–æ" –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–∫—Ü–∏—é –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')
            return
        
        ADMIN_PENDING_ACTIONS[username] = {
            'action': 'add_promotion_start_date', 
            'payload': {'title': title, 'description': description, 'image_file_id': image_file_id}
        }
        save_pending_actions(ADMIN_PENDING_ACTIONS)
        from datetime import datetime
        await message.answer('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏:', reply_markup=build_promotion_date_keyboard(datetime.now().year, datetime.now().month, 'promo_start_date'))
        return
    
    if a == 'add_promotion_start_date':
        # This will be handled by callback, not text message
        await message.answer('üìÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏.')
        return
    
    if a == 'add_promotion_end_date':
        # This will be handled by callback, not text message
        await message.answer('üìÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏.')
        return
