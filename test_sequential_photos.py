#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from unittest.mock import Mock, AsyncMock, patch
import asyncio

def test_sequential_photo_display():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º"""
    print("=== –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π ===")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handlers –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    from handlers import LAST_CATEGORY_PHOTO
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–∏–Ω–¥–µ–∫—Å—ã –æ—Ç 0 –¥–æ 4, –≥–¥–µ 4 - —Å–∞–º–∞—è –Ω–æ–≤–∞—è)
    mock_photos = ['photo_0.jpg', 'photo_1.jpg', 'photo_2.jpg', 'photo_3.jpg', 'photo_4.jpg']
    chat_id = 12345
    category_slug = 'family'
    chat_key = (chat_id, category_slug)
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_slug}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {len(mock_photos)}")
    print(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫: –æ—Ç —Ñ–æ—Ç–æ {len(mock_photos)-1} –∫ —Ñ–æ—Ç–æ 0, –∑–∞—Ç–µ–º —Ü–∏–∫–ª")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if chat_key in LAST_CATEGORY_PHOTO:
        del LAST_CATEGORY_PHOTO[chat_key]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    expected_sequence = []
    
    for step in range(8):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º 8 —à–∞–≥–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–∏–∫–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ handlers.py
        last_idx = LAST_CATEGORY_PHOTO.get(chat_key)
        
        if last_idx is None:
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ - –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–π –Ω–æ–≤–æ–π (–ø–æ—Å–ª–µ–¥–Ω–µ–π)
            idx = len(mock_photos) - 1
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π (–±–æ–ª–µ–µ —Å—Ç–∞—Ä–æ–π) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            idx = last_idx - 1
            if idx < 0:
                # –î–æ—à–ª–∏ –¥–æ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–∞–º–æ–π –Ω–æ–≤–æ–π
                idx = len(mock_photos) - 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        LAST_CATEGORY_PHOTO[chat_key] = idx
        expected_sequence.append(idx)
        
        print(f"–®–∞–≥ {step + 1}: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ {idx} ({mock_photos[idx]})")
    
    print(f"\n–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {expected_sequence}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
    # –û–∂–∏–¥–∞–µ–º: [4, 3, 2, 1, 0, 4, 3, 2] (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º, –∑–∞—Ç–µ–º —Ü–∏–∫–ª)
    expected = [4, 3, 2, 1, 0, 4, 3, 2]
    
    if expected_sequence == expected:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º")
        return True
    else:
        print(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –û–∂–∏–¥–∞–ª–æ—Å—å {expected}, –ø–æ–ª—É—á–µ–Ω–æ {expected_sequence}")
        return False

def test_reviews_sequential_display():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –æ—Ç–∑—ã–≤–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ ===")
    
    from handlers import LAST_CATEGORY_PHOTO
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã
    mock_reviews = ['review_0.jpg', 'review_1.jpg', 'review_2.jpg']
    chat_id = 12345
    chat_key = (chat_id, 'reviews')
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if chat_key in LAST_CATEGORY_PHOTO:
        del LAST_CATEGORY_PHOTO[chat_key]
    
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {len(mock_reviews)}")
    print(f"–û–∂–∏–¥–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫: –æ—Ç –æ—Ç–∑—ã–≤–∞ {len(mock_reviews)-1} –∫ –æ—Ç–∑—ã–≤—É 0, –∑–∞—Ç–µ–º —Ü–∏–∫–ª")
    
    expected_sequence = []
    
    for step in range(6):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—Ç–æ—Ä–∞ —Ü–∏–∫–ª–∞
        last_idx = LAST_CATEGORY_PHOTO.get(chat_key)
        
        if last_idx is None:
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ - –Ω–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ
            idx = len(mock_reviews) - 1
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É (–±–æ–ª–µ–µ —Å—Ç–∞—Ä–æ–º—É) –æ—Ç–∑—ã–≤—É
            idx = last_idx - 1
            if idx < 0:
                # –î–æ—à–ª–∏ –¥–æ —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–∞–º–æ–º—É –Ω–æ–≤–æ–º—É
                idx = len(mock_reviews) - 1
        
        LAST_CATEGORY_PHOTO[chat_key] = idx
        expected_sequence.append(idx)
        
        print(f"–®–∞–≥ {step + 1}: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤ {idx} ({mock_reviews[idx]})")
    
    print(f"\n–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {expected_sequence}")
    
    # –û–∂–∏–¥–∞–µ–º: [2, 1, 0, 2, 1, 0]
    expected = [2, 1, 0, 2, 1, 0]
    
    if expected_sequence == expected:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –û—Ç–∑—ã–≤—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º")
        return True
    else:
        print(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –û–∂–∏–¥–∞–ª–æ—Å—å {expected}, –ø–æ–ª—É—á–µ–Ω–æ {expected_sequence}")
        return False

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞...")
    
    test1_passed = test_sequential_photo_display()
    test2_passed = test_reviews_sequential_display()
    
    print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
    print(f"–¢–µ—Å—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_passed else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    print(f"–¢–µ—Å—Ç –æ—Ç–∑—ã–≤–æ–≤: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_passed else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    
    if test1_passed and test2_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏.")