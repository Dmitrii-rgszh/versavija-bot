#!/usr/bin/env python3
"""
–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å webhook –≤–º–µ—Å—Ç–æ polling
–ò–∑–±–µ–≥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import asyncio
import logging
from aiohttp import web
from aiohttp.web_request import Request
from aiogram import Bot, Dispatcher
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.types import Update
import os
from dotenv import load_dotenv
import handlers  # –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
import welcome_messages  # –∏–º–ø–æ—Ä—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
from db import init_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBHOOK_HOST = 'localhost'
WEBHOOK_PORT = 8080
WEBHOOK_PATH = f'/webhook/{BOT_TOKEN}'
WEBHOOK_URL = f'http://{WEBHOOK_HOST}:{WEBHOOK_PORT}{WEBHOOK_PATH}'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

async def webhook_handler(request: Request, bot: Bot) -> web.Response:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        update_data = await request.json()
        update = Update.model_validate(update_data, from_attributes=True)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await dp.feed_update(bot, update)
        
        return web.Response()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ webhook handler: {e}")
        return web.Response(status=500)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        init_db()
        logging.info('Database initialized')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        welcome_messages.setup_welcome_handlers()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
        await bot.set_webhook(url=WEBHOOK_URL)
        logging.info(f'Webhook set to: {WEBHOOK_URL}')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = web.Application()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ webhook
        app.router.add_post(WEBHOOK_PATH, 
                           lambda req: webhook_handler(req, bot))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        async def info_handler(request):
            return web.Response(text=f"Versavija Bot Webhook Server\nListening on: {WEBHOOK_URL}")
        
        app.router.add_get('/', info_handler)
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, WEBHOOK_HOST, WEBHOOK_PORT)
        await site.start()
        
        logging.info(f'Webhook server started on http://{WEBHOOK_HOST}:{WEBHOOK_PORT}')
        logging.info('Bot is running with webhook...')
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logging.info('Stopping bot...')
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            await bot.delete_webhook()
            await runner.cleanup()
            await bot.session.close()
            
    except Exception as e:
        logging.error(f"Error in main: {e}")
        await bot.session.close()

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ —Å webhook...")
    print(f"üì° Webhook URL: http://{WEBHOOK_HOST}:{WEBHOOK_PORT}{WEBHOOK_PATH}")
    print("‚ö†Ô∏è  –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    print("üîß –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")