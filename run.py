import asyncio
import logging
from config import bot, dp
# –í –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è run.py –Ω–∞–ø—Ä—è–º—É—é, –ø–æ—ç—Ç–æ–º—É –Ω–∞–¥–æ —è–≤–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å handlers,
# —á—Ç–æ–±—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (/start –∏ —Ç.–¥.).
import handlers  # noqa: F401  (side-effect import)
import welcome_messages  # –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
from birthday_scheduler import setup_birthday_scheduler
from aiogram.types import BotCommand
from db import init_db  # ensure DB (including new bookings table) is initialized before polling


async def _set_bot_commands():
    try:
        cmds = [
            BotCommand(command='start', description='–ù–∞—á–∞—Ç—å / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
            BotCommand(command='help', description='–°–ø—Ä–∞–≤–∫–∞'),
        ]
        await bot.set_my_commands(cmds)
        logging.info('Bot commands set: %s', ', '.join(c.command for c in cmds))
    except Exception:
        logging.exception('Failed to set bot commands')


async def main():
    try:
        # Reduce noise from third-party libraries while keeping our INFO logs
        try:
            logging.getLogger('telethon').setLevel(logging.WARNING)
            logging.getLogger('aiohttp').setLevel(logging.WARNING)
        except Exception:
            pass
        # Initialize / migrate database (adds new tables if they don't exist)
        try:
            init_db()
            logging.info('Database initialized (tables ensured)')
        except Exception:
            logging.exception('Failed to initialize database')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π (–¥–ª—è –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø)
        welcome_messages.setup_welcome_handlers()
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –î–† –∏ DM-–ø—Ä–æ–º–æ
        try:
            await setup_birthday_scheduler()
        except Exception as e:
            logging.warning('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –î–†: %s', e)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Client API
        try:
            from simple_tracker import setup_simple_tracking
            await setup_simple_tracking()
            logging.info('Simple tracking system initialized with full automation')
        except Exception as e:
            # –ï—Å–ª–∏ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            try:
                from auto_monitor import setup_auto_monitoring
                await setup_auto_monitoring()
                logging.info('Automatic monitoring system initialized as fallback')
            except Exception as e2:
                # –ï—Å–ª–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –≤–µ—Ä—Å–∏—é
                try:
                    from demo_tracker import setup_demo_tracking
                    await setup_demo_tracking()
                    logging.info('Demo tracking system initialized as final fallback')
                except Exception as e3:
                    logging.info(f'No tracking system available: {e3}')

        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logging.info('Webhook deleted before polling start')
        except Exception:
            logging.exception('Failed to delete webhook before polling start')

        await _set_bot_commands()

        # –ó–∞–ø—É—Å–∫–∞–µ–º Bot API polling
        logging.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Bot API polling...")
        await dp.start_polling(bot)
        
        # await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main())
